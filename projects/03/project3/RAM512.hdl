// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:

    //use demux to select/enable the correct 64RAM8 module with address[8:6]
    DMux8Way(in=true, sel=address[6..8], a=ram64OneEn, b=ram64TwoEn, c=ram64ThreeEn, d=ram64FourEn, e=ram64FiveEn, f=ram64SixEn, g=ram64SevenEn, h=ram64EightEn);

    //use address[8:6] ANDed with load to select the correct RAM/Register component of a RAM64 module
    And(a=load, b=ram64OneEn, out=En1);
    And(a=load, b=ram64TwoEn, out=En2);
    And(a=load, b=ram64ThreeEn, out=En3);
    And(a=load, b=ram64FourEn, out=En4);
    And(a=load, b=ram64FiveEn, out=En5);
    And(a=load, b=ram64SixEn, out=En6);
    And(a=load, b=ram64SevenEn, out=En7);
    And(a=load, b=ram64EightEn, out=En8);

    RAM64(in=in, load=En1, address=address[0..5], out=out1);
    RAM64(in=in, load=En2, address=address[0..5], out=out2);
    RAM64(in=in, load=En3, address=address[0..5], out=out3);
    RAM64(in=in, load=En4, address=address[0..5], out=out4);
    RAM64(in=in, load=En5, address=address[0..5], out=out5);
    RAM64(in=in, load=En6, address=address[0..5], out=out6);
    RAM64(in=in, load=En7, address=address[0..5], out=out7);
    RAM64(in=in, load=En8, address=address[0..5], out=out8);

    //use mux to select theb correct RAM64 module
    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address[6..8], out=out);
}