// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];


    PARTS:
    // Put your code here:
  
    //The following are the input logic

    Or(a=address[12], b=address[11], out=OrTmp1);
    Or(a=address[10], b=address[9], out=OrTmp2);
    Or(a=address[8], b=address[7], out=OrTmp3);
    Or(a=address[6], b=address[5], out=OrTmp4);
    Or(a=address[4], b=address[3], out=OrTmp5);
    Or(a=address[2], b=address[1], out=OrTmp6);
    Or(a=address[0], b=false, out=OrTmp7);

    Or(a=OrTmp1, b=OrTmp2, out=OrResult1);
    Or(a=OrTmp3, b=OrTmp4, out=OrResult2);
    Or(a=OrTmp5, b=OrTmp6, out=OrResult3);
    Or(a=OrTmp7, b=false, out=OrResult4);

    Or(a=OrResult1,b=OrResult2,out=OrResult5);
    Or(a=OrResult3,b=OrResult4,out=OrResult6);
    Or(a=OrResult5,b=OrResult6,out=OutSel);

    //for output sel signal of dmux between screen and upper-address output
    //also for input sel signal of mux between ram/screen and invalid address
    And(a=address[14], b=address[13], out=AndSel);

    DMux(in=load, sel=AndSel, a=tmpLoadOne, b=nullLoadOne);
    DMux(in=tmpLoadOne, sel=address[14], a=ramLoad, b=screenLoad);
   
    RAM16K(in=in,load=ramLoad,address=address[0..13],out=ramOut); 

    Screen(in=in,load=screenLoad,address=address[0..12],out= ScreenOut); 

    Keyboard(out=kbdOut); 

    //The following are the output logic
    Mux16(a=kbdOut, b=false, sel=OutSel, out=tmpOutOne);
    Mux16(a=ScreenOut, b=tmpOutOne, sel=AndSel, out=tmpOutTwo);
    Mux16(a=ramOut, b=tmpOutTwo, sel=address[14], out=out);

}














